{"version":3,"file":"static/js/988.957efd9d.chunk.js","mappings":"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","sources":["components/OctagonButton.tsx","pages/LowPop.tsx"],"sourcesContent":["import React, {FC, memo, PropsWithChildren, useEffect, useState} from 'react';\r\nimport styled, {keyframes} from \"styled-components\";\r\nimport {Keyframes} from \"styled-components/dist/types\";\r\n\r\nexport interface ButtonProps extends PropsWithChildren {\r\n    onClick?: () => void;\r\n}\r\n\r\n\r\nconst appearAnimation = keyframes`\r\n    from {\r\n        transform: scale(0%);\r\n    }\r\n    to {\r\n        transform: scale(100%);\r\n    }\r\n`;\r\n\r\nconst disappearAnimation = keyframes`\r\n    from {\r\n        transform: scale(100%);\r\n    }\r\n    to {\r\n        transform: scale(0%);\r\n    }\r\n`;\r\n\r\nconst StyledWrapper = styled.div<{$animation: Keyframes | string; }>`\r\n    width: 100px;\r\n    height: 100px;\r\n    font-size: 2rem;\r\n    background-color: white;\r\n    clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);\r\n    position: relative;\r\n    \r\n    animation: ${props => props.$animation} 0.25s ease-in-out forwards;\r\n`;\r\n\r\nconst StyledContent = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    top: 0;\r\n    margin: auto;\r\n    width: calc(100% - 5px);\r\n    height: calc(100% - 5px);\r\n    background-color: blue;\r\n    clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);\r\n`;\r\n\r\n\r\nconst OctagonButton: FC<ButtonProps> = ({children, onClick}) => {\r\n    const [animation, setAnimation] = useState<Keyframes | string>(appearAnimation)\r\n\r\n    useEffect(() => {\r\n        if (children) {\r\n            setAnimation(appearAnimation);\r\n            return;\r\n        }\r\n        setAnimation(disappearAnimation);\r\n    }, [children]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setAnimation(\"none\");\r\n        }\r\n    }, []);\r\n\r\n    function handleClick() {\r\n        setAnimation(disappearAnimation);\r\n        onClick?.();\r\n    }\r\n\r\n    return (\r\n        <StyledWrapper onClick={handleClick} $animation={animation}>\r\n            <StyledContent>\r\n                {children}\r\n            </StyledContent>\r\n        </StyledWrapper>\r\n    );\r\n};\r\n\r\nexport default OctagonButton;","import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport OctagonButton from \"../components/OctagonButton\";\r\nimport PauseButton from \"../components/PauseButton\";\r\nimport Score from \"../components/Score\";\r\nimport useFailMessage from \"../hooks/useFailMessage\";\r\nimport usePauseMenu from \"../hooks/usePauseMenu\";\r\nimport useUniqueKeys from \"../hooks/useUniqueKeys\";\r\nimport usePassMessage from \"../hooks/usePassMessage\";\r\nimport {setLowPopScore} from \"../models/userSlice\";\r\nimport {useAppDispatch, useAppSelector} from \"../store\";\r\nimport {useTimer} from \"../hooks/useTimer\";\r\nimport Timer from \"../components/Timer\";\r\nimport GameEndMenu from \"../components/GameEndMenu\";\r\nimport PageWrapper from \"../components/PageWrapper\";\r\nimport {formatTime} from \"../lib/TimeFormatter\";\r\nimport {getRandomInt} from \"../lib/Random\";\r\n\r\nconst StyledGrid = styled.div`\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    display: grid;\r\n    height: 95%;\r\n    padding: 10px;\r\n    gap: 10px;\r\n    align-items: center;\r\n    grid-template-columns: repeat(auto-fill, 100px);\r\n    grid-template-rows: repeat(auto-fill, 100px);\r\n    justify-content: center;\r\n`;\r\n\r\n\r\ntype ButtonState = \"visible\" | \"hidden\" | \"switch\";\r\n\r\ninterface ButtonData {\r\n    value: number | null;\r\n    state: ButtonState;\r\n}\r\n\r\n\r\n\r\nconst LowPop = () => {\r\n    const [buttons, setButtons] = useState<ButtonData[]>([]);\r\n    const [cellCount, setCellCount] = useState(0);\r\n    const keys = useUniqueKeys(LowPop.name, cellCount);\r\n    const [minutes, seconds, timerStart, timerPause, timerRestart, onExpire] = useTimer({minutes: 1});\r\n    const [numbers, setNumbers] = useState<number[]>([]);\r\n    const [score, setScore] = useState<number>(0);\r\n    const [isGameEnd, setIsGameEnd] = useState(false);\r\n    const scoreRef = useRef(score);\r\n    const [failMessagePlaceholder, showFailMessage, onFailMessageHide] = useFailMessage(1);\r\n    const [passMessagePlaceholder, showPassMessage, onPassMessageHide] = usePassMessage(1);\r\n    const [pauseMenuPlaceholder, showPauseMenu, pauseMenuIsVisible] = usePauseMenu();\r\n    const dispatch = useAppDispatch();\r\n    const {lowPop} = useAppSelector(state => state.user);\r\n\r\n    function onButtonClick(id: number, content: number) {\r\n        if (numbers[0] !== content) {\r\n            showFailMessage();\r\n            setButtons(new Array(cellCount).fill({value: null, state: \"hidden\"}));\r\n            return;\r\n        }\r\n\r\n        setScore(prev => prev + 10);\r\n        if (numbers.length === 1) {\r\n            showPassMessage();\r\n            setButtons(new Array(cellCount).fill({value: null, state: \"hidden\"}));\r\n            return;\r\n        }\r\n\r\n        setNumbers(numbers.slice(1, numbers.length));\r\n        const newButtons = [...buttons];\r\n        newButtons[id] = {value: null, state: \"switch\"};\r\n        setButtons(newButtons);\r\n\r\n    }\r\n\r\n    const generateSubsequence = (size: number) => {\r\n        const count = getRandomInt(5, 10);\r\n        const array: Array<number | null> = new Array<number | null>(size).fill(null);\r\n        const used = new Array<number>();\r\n\r\n        let generatedCount = 0;\r\n        while (generatedCount < count) {\r\n            const index = getRandomInt(0, array.length - 1);\r\n            if (used.includes(index)) continue;\r\n            used.push(index);\r\n            array[index] = getRandomInt(-100, 100);\r\n            generatedCount++;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    const generateLevel = (size: number) => {\r\n        const subsequence = generateSubsequence(size);\r\n        setNumbers((subsequence\r\n            .filter(item => item != null) as number[])\r\n            .sort((a, b) => a - b)\r\n        );\r\n        setButtons(subsequence.map(item => ({value: item, state: item ? \"visible\" : \"hidden\"})));\r\n    };\r\n\r\n    const restart = () => {\r\n        setScore(0);\r\n        generateLevel(cellCount);\r\n        timerRestart();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!cellCount) return;\r\n\r\n        onFailMessageHide(() => {\r\n            generateLevel(cellCount);\r\n        });\r\n\r\n        onPassMessageHide(() => {\r\n            generateLevel(cellCount);\r\n        });\r\n\r\n        onExpire(() => {\r\n            if (scoreRef.current > lowPop) {\r\n                dispatch(setLowPopScore(scoreRef.current));\r\n            }\r\n            setButtons([]);\r\n            setIsGameEnd(true);\r\n        });\r\n\r\n        generateLevel(cellCount);\r\n        timerStart();\r\n        // eslint-disable-next-line\r\n    }, [cellCount]);\r\n\r\n    useEffect(() => {\r\n        scoreRef.current = score;\r\n    }, [score]);\r\n\r\n    const initCellCount = useCallback((layout: HTMLDivElement) => {\r\n        if (layout == null) return;\r\n        const columnCount = window.getComputedStyle(layout).gridTemplateColumns.split(\" \").length;\r\n        const rowsCount = window.getComputedStyle(layout).gridTemplateRows.split(\" \").length;\r\n        setCellCount(columnCount * rowsCount);\r\n    }, []);\r\n\r\n    function saveRecord() {\r\n        if (scoreRef.current > lowPop) {\r\n            dispatch(setLowPopScore(scoreRef.current));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <Timer>{formatTime(minutes, seconds)}</Timer>\r\n            {failMessagePlaceholder}\r\n            {passMessagePlaceholder}\r\n            {pauseMenuPlaceholder}\r\n            <GameEndMenu onLeave={saveRecord} isVisible={isGameEnd} setIsVisible={setIsGameEnd} onRestart={restart} score={score} bestScore={lowPop}/>\r\n            <PauseButton onClick={showPauseMenu} aria-disabled={pauseMenuIsVisible}/>\r\n            <Score count={score}/>\r\n            <StyledGrid ref={initCellCount}>\r\n                {buttons.map((item, index) => {\r\n                    switch (item.state) {\r\n                        case \"visible\":\r\n                            return (\r\n                                <OctagonButton key={keys[index]}\r\n                                               onClick={() => onButtonClick(index, item.value as number)}>\r\n                                    {item.value}\r\n                                </OctagonButton>\r\n                            );\r\n                        case \"switch\":\r\n                            return (<OctagonButton key={keys[index]}/>);\r\n                        default:\r\n                            return <div key={keys[index]}/>\r\n                    }\r\n                })}\r\n            </StyledGrid>\r\n        </PageWrapper>\r\n    );\r\n};\r\n\r\nexport default LowPop;"],"names":["appearAnimation","keyframes","_templateObject","_taggedTemplateLiteral","disappearAnimation","_templateObject2","StyledWrapper","styled","div","_templateObject3","props","$animation","StyledContent","_templateObject4","_ref","children","onClick","animation","setAnimation","useState","useEffect","_jsx","StyledGrid","LowPop","buttons","setButtons","cellCount","setCellCount","keys","useUniqueKeys","name","minutes","seconds","timerStart","timerPause","timerRestart","onExpire","useTimer","numbers","setNumbers","score","setScore","isGameEnd","setIsGameEnd","scoreRef","useRef","failMessagePlaceholder","showFailMessage","onFailMessageHide","useFailMessage","passMessagePlaceholder","showPassMessage","onPassMessageHide","usePassMessage","pauseMenuPlaceholder","showPauseMenu","pauseMenuIsVisible","usePauseMenu","dispatch","useAppDispatch","lowPop","useAppSelector","state","user","generateLevel","size","subsequence","count","getRandomInt","array","Array","fill","used","generatedCount","index","length","includes","push","generateSubsequence","filter","item","sort","a","b","map","value","current","setLowPopScore","initCellCount","useCallback","layout","columnCount","window","getComputedStyle","gridTemplateColumns","split","rowsCount","gridTemplateRows","_jsxs","PageWrapper","Timer","formatTime","GameEndMenu","onLeave","isVisible","setIsVisible","onRestart","restart","bestScore","PauseButton","Score","ref","OctagonButton","id","content","prev","slice","newButtons","onButtonClick"],"sourceRoot":""}