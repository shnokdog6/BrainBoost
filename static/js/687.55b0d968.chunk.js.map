{"version":3,"file":"static/js/687.55b0d968.chunk.js","mappings":"kPAcA,MAAMA,GAAkBC,EAAAA,EAAAA,IAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mPAc3BC,GAAgBH,EAAAA,EAAAA,IAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qPAczBG,EAAeC,EAAAA,GAAOC,OAAMC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,kNAOVO,GAASA,EAAMC,QAAU,YAChCD,GAASA,EAAME,YAAc,SAsD9C,EAjDwCC,IAAmD,IAAlD,SAACC,EAAQ,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,EAAM,MAAEC,GAAML,EACjF,MAAOM,EAAWC,IAAgBC,EAAAA,EAAAA,aAC3BC,EAAOC,IAAYF,EAAAA,EAAAA,YA0C1B,OAvBAG,EAAAA,EAAAA,YAAU,KACN,IAAKV,EAED,YADAS,OAASE,GAGbL,EAAapB,GACb,MAAM0B,EAAUC,YAAW,KACvBP,OAAaK,GACbG,aAAaF,EAAQ,GACtB,MACHH,OAASE,EAAU,GACpB,CAACX,KAEJU,EAAAA,EAAAA,YAAU,KACN,GAAIP,EAAQ,CACRG,EAAahB,GACb,MAAMsB,EAAUC,YAAW,KACvBP,OAAaK,GACbG,aAAaF,EAAQ,GACtB,IACP,IACD,CAACT,KAGAY,EAAAA,EAAAA,KAACvB,EAAY,CAACS,QAzClB,WACeQ,EAAXP,EAAoB,UAAsB,WACnC,OAAPD,QAAO,IAAPA,GAAAA,GACJ,EAsCwCH,WAAYO,EAAWR,OAAQW,GAAQ,E,qDCjFnF,MAAMQ,GAAgBvB,EAAAA,EAAAA,IAAOwB,EAAAA,EAAPxB,CAAmBL,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oCAInC6B,EAAazB,EAAAA,GAAO0B,IAAG5B,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iVAwBvB+B,EAAkBA,KACpB,MAAOC,EAAWC,IAAgBf,EAAAA,EAAAA,UAAS,GACrCgB,GAAOC,EAAAA,EAAAA,GAAcJ,EAAgBK,KAAMJ,IAC1CK,EAASC,IAAcpB,EAAAA,EAAAA,UAA4B,KACnDqB,EAASC,EAASC,EAAYC,EAAYC,EAAcC,IAAYC,EAAAA,EAAAA,GAAS,CAACN,QAAS,KACvFO,EAAOC,IAAY7B,EAAAA,EAAAA,UAAiB,GACrC8B,GAAWC,EAAAA,EAAAA,QAAOH,GAClBI,GAAgBD,EAAAA,EAAAA,QAAO,GACvBE,GAAeF,EAAAA,EAAAA,QAAO,GACtBG,GAAcH,EAAAA,EAAAA,QAAiB,KAC9BI,EAAsBC,EAAeC,IAAsBC,EAAAA,EAAAA,MAC3DC,EAAwBC,EAAiBC,IAAqBC,EAAAA,EAAAA,GAAe,IAC7EC,EAAwBC,EAAiBC,IAAqBC,EAAAA,EAAAA,GAAe,IAC7EC,EAAWC,IAAgBhD,EAAAA,EAAAA,WAAS,GACrCiD,GAAWC,EAAAA,EAAAA,OACX,YAACC,IAAeC,EAAAA,EAAAA,KAAeC,GAASA,EAAMC,OAEpD,SAASC,EAAcC,GAGnB,IAAItB,EAAYuB,QAAQC,SAASF,KACjCtB,EAAYuB,QAAQE,KAAKH,GAEI,aAAzBrC,EAAQqC,GAAOH,QACfxB,GAAS+B,GAAQA,EAAO,KACxB3B,EAAawB,SAAW,GAGxBvB,EAAYuB,QAAQI,QAAU7B,EAAcyB,SAAS,CAErD,GADAjC,IACIS,EAAawB,UAAYzB,EAAcyB,QAEvC,YADAb,IAGJxB,EAAW,IACXoB,GACJ,CACJ,CAEA,SAASsB,IAEL,IAAID,GAASE,EAAAA,EAAAA,GAAa,GAAI,IAC9BF,IAAYA,EAAS,EAErB7B,EAAcyB,SAAUM,EAAAA,EAAAA,GAAa,EAAGF,EAAS,GACjD,MAAMG,EAAQ,IAAIC,MAAkBnD,GAAWoD,KAAK,CAACb,MAAO,WACtDc,EAAO,IAAIF,MACjB,IAAIG,EAAQC,KAAKC,MAA6B,IAAtBxD,EAAY+C,IACpCO,GAASA,EAAQ,EACjB,IAAIG,EAAMH,EAAQP,EACdU,EAAMzD,IACNyD,EAAMzD,EACNsD,EAAQ,GAGZ,IAAK,IAAII,EAAIJ,EAAOI,EAAID,IAAOC,EAC3BR,EAAMQ,GAAK,CAACC,MAAO,EAAGpB,MAAO,WAG7BkB,IAAQzD,IAAWyD,GAAO,GAG9B,IAAIG,EAAiB,EACrB,KAAOA,EAAiB1C,EAAcyB,SAAS,CAC3C,MAAMD,GAAQO,EAAAA,EAAAA,GAAaK,EAAOG,EAAM,GACpCJ,EAAKT,SAASF,KAElBW,EAAKR,KAAKH,GACVQ,EAAMR,GAAS,CAACiB,OAAOV,EAAAA,EAAAA,GAAa,EAAG,KAAMV,MAAO,cAClDqB,EACN,CAEA,OAAOV,CACX,CASA,MAAMW,GAAaC,EAAAA,EAAAA,cAAaC,IAC5B,GAAc,MAAVA,EAAgB,OACpB,MAAMC,EAAcC,OAAOC,iBAAiBH,GAAQI,oBAAoBC,MAAM,KAAKrB,OAC7EsB,EAAYJ,OAAOC,iBAAiBH,GAAQO,iBAAiBF,MAAM,KAAKrB,OAC9E9C,EAAa+D,EAAcK,EAAU,GACtC,IA4CH,OA1CAhF,EAAAA,EAAAA,YAAU,KACDW,IAEL2B,GAAkB,KACdR,EAAawB,QAAU,EACvBvB,EAAYuB,QAAU,GACtBrC,EAAW0C,KACXvC,GAAY,IAGhBsB,GAAkB,KACdZ,EAAawB,QAAU,EACvBvB,EAAYuB,QAAU,GACtBrC,EAAW0C,KACXvC,GAAY,IAGhBG,GAAS,KACLN,EAAW,IACX4B,GAAa,EAAK,IAGtB5B,EAAW0C,KACXvC,IAAY,GACb,CAACT,KAEJX,EAAAA,EAAAA,YAAU,KACDW,IACDuB,EAAoBb,IACnBD,IAAY,GAClB,CAACc,KAEJlC,EAAAA,EAAAA,YAAU,KACN2B,EAAS2B,QAAU7B,CAAK,GACzB,CAACA,KASAyD,EAAAA,EAAAA,MAAC5E,EAAa,CAAAhB,SAAA,CACT8C,EACAI,EACAR,GACD3B,EAAAA,EAAAA,KAAC8E,EAAAA,EAAW,CAACC,QAXrB,WACQzD,EAAS2B,QAAUN,GACnBF,GAASuC,EAAAA,EAAAA,IAAoB1D,EAAS2B,SAE9C,EAO0CgC,UAAW1C,EAAW2C,aAAc1C,EAAc2C,UA7D5F,WACI1D,EAAawB,QAAU,EACvBvB,EAAYuB,QAAU,GACtBrC,EAAW0C,KACXrC,GACJ,EAwDgHG,MAAOA,EAAOgE,UAAWzC,KACjI3C,EAAAA,EAAAA,KAACqF,EAAAA,EAAW,CAACnG,QAAS0C,EAAe,gBAAeC,KACpD7B,EAAAA,EAAAA,KAACsF,EAAAA,EAAK,CAACC,MAAOnE,KACdpB,EAAAA,EAAAA,KAACwF,EAAAA,EAAK,CAAAvG,UAAEwG,EAAAA,EAAAA,GAAW5E,EAASC,MAC5Bd,EAAAA,EAAAA,KAACG,EAAU,CAACuF,IAAKvB,EAAWlF,SACvB0B,EAAQgF,KAAI,CAACC,EAAM5C,KAChB,OAAQ4C,EAAK/C,OACT,IAAK,WACD,OACI7C,EAAAA,EAAAA,KAAC6F,EAAU,CAEP3G,QAASA,IAAM6D,EAAcC,GAC7B7D,UAAU,EAAKF,SAEd2G,EAAK3B,OAJDzD,EAAKwC,IAOtB,IAAK,UACD,OAAOhD,EAAAA,EAAAA,KAAC6F,EAAU,CAAmB3G,QAASA,IAAM6D,EAAcC,IAA1CxC,EAAKwC,IACjC,QACI,OAAOhD,EAAAA,EAAAA,KAAA,SAAUQ,EAAKwC,IAC9B,QAGI,EAIxB,G","sources":["components/RectButton.tsx","pages/MemorySweepPage.tsx"],"sourcesContent":["import React, {ButtonHTMLAttributes, FC, memo, PropsWithChildren, useEffect, useState} from 'react';\r\nimport styled, {keyframes} from \"styled-components\";\r\nimport {Keyframes} from \"styled-components/dist/types\";\r\n\r\nexport interface RectButtonProps extends PropsWithChildren {\r\n    onClick?: () => void;\r\n    selected?: boolean;\r\n    reshow?: boolean;\r\n    reset?: boolean;\r\n}\r\n\r\nexport type ButtonColors = \"#4eaf52\" | \"#f44133\";\r\n\r\n\r\nconst appearAnimation = keyframes`\r\n    0% {\r\n        transform: rotateY(0deg);\r\n    }\r\n    50% {\r\n        transform: rotateY(180deg);\r\n        background-color: #198de4;\r\n    }\r\n    100% {\r\n        transform: rotateY(0deg);\r\n        background-color: #414246;\r\n    }\r\n`;\r\n\r\nconst showAnimation = keyframes`\r\n    0% {\r\n        transform: rotateY(0deg);\r\n    }\r\n    50% {\r\n        transform: rotateY(180deg);\r\n        background-color: #198de4;\r\n    }\r\n    100% {\r\n        transform: rotateY(180deg);\r\n        background-color: #198de4;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled.button<{$animation?: Keyframes | string; $color?: string}>`\r\n    width: 75px;\r\n    height: 75px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 2px 0 #000;\r\n    outline: none;\r\n    border: none;\r\n    background-color: ${props => props.$color || \"#414246\"};\r\n    animation: ${props => props.$animation || \"none\"} 1.2s ease-in-out;\r\n`;\r\n\r\n\r\n\r\nconst RectButton: FC<RectButtonProps> = ({children ,onClick, selected, reshow, reset}) => {\r\n    const [animation, setAnimation] = useState<Keyframes>();\r\n    const [color, setColor] = useState<ButtonColors>();\r\n\r\n    function handleClick() {\r\n        selected ? setColor(\"#4eaf52\") : setColor(\"#f44133\");\r\n        onClick?.();\r\n    }\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (selected) {\r\n    //         console.log(1);\r\n    //         setAnimation(appearAnimation);\r\n    //         const timeout = setTimeout(() => {\r\n    //             setAnimation(undefined);\r\n    //             clearTimeout(timeout);\r\n    //         }, 1200);\r\n    //     }\r\n    // }, [selected]);\r\n\r\n    useEffect(() => {\r\n        if (!children) {\r\n            setColor(undefined)\r\n            return;\r\n        }\r\n        setAnimation(appearAnimation);\r\n        const timeout = setTimeout(() => {\r\n            setAnimation(undefined);\r\n            clearTimeout(timeout);\r\n        }, 1200);\r\n        setColor(undefined);\r\n    }, [children]);\r\n\r\n    useEffect(() => {\r\n        if (reshow) {\r\n            setAnimation(showAnimation);\r\n            const timeout = setTimeout(() => {\r\n                setAnimation(undefined);\r\n                clearTimeout(timeout);\r\n            }, 2000);\r\n        }\r\n    }, [reshow]);\r\n\r\n    return (\r\n        <StyledButton onClick={handleClick} $animation={animation} $color={color}/>\r\n    );\r\n};\r\n\r\nexport default RectButton;","import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport PageWrapper from \"../components/PageWrapper\";\r\nimport PauseButton from \"../components/PauseButton\";\r\nimport usePauseMenu from \"../hooks/usePauseMenu\";\r\nimport {useTimer} from \"../hooks/useTimer\";\r\nimport useFailMessage from \"../hooks/useFailMessage\";\r\nimport usePassMessage from \"../hooks/usePassMessage\";\r\nimport Score from \"../components/Score\";\r\nimport Timer from \"../components/Timer\";\r\nimport {formatTime} from \"../lib/TimeFormatter\";\r\nimport RectButton from \"../components/RectButton\";\r\nimport styled from \"styled-components\";\r\nimport useUniqueKeys from \"../hooks/useUniqueKeys\";\r\nimport {getRandomInt} from \"../lib/Random\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport GameEndMenu from \"../components/GameEndMenu\";\r\nimport {useAppDispatch, useAppSelector} from \"../store\";\r\nimport {setMemorySweepScore} from \"../models/userSlice\";\r\n\r\nconst StyledWrapper = styled(PageWrapper)`\r\n    background: #0c151a;\r\n`;\r\n\r\nconst StyledGrid = styled.div`\r\n    position: absolute;\r\n    bottom: 0;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    margin: auto;\r\n    height: 90%;\r\n    display: grid;\r\n    padding: 10px;\r\n    gap: 10px;\r\n    align-items: center;\r\n    grid-template-columns: repeat(4, 75px);\r\n    grid-template-rows: repeat(auto-fill, 75px);\r\n    justify-content: center;\r\n`;\r\n\r\ntype ButtonState = \"visible\" | \"hidden\" | \"selected\";\r\n\r\nexport interface ButtonData {\r\n    value?: number;\r\n    state: ButtonState;\r\n}\r\n\r\nconst MemorySweepPage = () => {\r\n    const [cellCount, setCellCount] = useState(0);\r\n    const keys = useUniqueKeys(MemorySweepPage.name, cellCount);\r\n    const [buttons, setButtons] = useState<Array<ButtonData>>([]);\r\n    const [minutes, seconds, timerStart, timerPause, timerRestart, onExpire] = useTimer({minutes: 1});\r\n    const [score, setScore] = useState<number>(0);\r\n    const scoreRef = useRef(score);\r\n    const selectedCount = useRef(0);\r\n    const guessedCount = useRef(0);\r\n    const usedButtons = useRef<number[]>([]);\r\n    const [pauseMenuPlaceholder, showPauseMenu, pauseMenuIsVisible] = usePauseMenu();\r\n    const [failMessagePlaceholder, showFailMessage, onFailMessageHide] = useFailMessage(1);\r\n    const [passMessagePlaceholder, showPassMessage, onPassMessageHide] = usePassMessage(1);\r\n    const [isGameEnd, setIsGameEnd] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n    const {memorySweep} = useAppSelector(state => state.user);\r\n\r\n    function onButtonClick(index: number) {\r\n\r\n\r\n        if (usedButtons.current.includes(index)) return;\r\n        usedButtons.current.push(index);\r\n\r\n        if (buttons[index].state === \"selected\") {\r\n            setScore(prev => prev + 10);\r\n            guessedCount.current += 1;\r\n        }\r\n\r\n        if (usedButtons.current.length >= selectedCount.current) {\r\n            timerPause();\r\n            if (guessedCount.current === selectedCount.current) {\r\n                showPassMessage();\r\n                return;\r\n            }\r\n            setButtons([]);\r\n            showFailMessage();\r\n        }\r\n    }\r\n\r\n    function generateLevel() {\r\n\r\n        let length = getRandomInt(16, 24);\r\n        length -= +(length % 4);\r\n\r\n        selectedCount.current = getRandomInt(4, length / 2);\r\n        const array = new Array<ButtonData>(cellCount).fill({state: \"hidden\"});\r\n        const used = new Array<number>();\r\n        let start = Math.floor((cellCount - length) * 0.5);\r\n        start += start % 4;\r\n        let end = start + length;\r\n        if (end > cellCount) {\r\n            end = cellCount;\r\n            start = 0;\r\n        }\r\n\r\n        for (let i = start; i < end; ++i) {\r\n            array[i] = {value: 0, state: \"visible\"};\r\n        }\r\n\r\n        if (end === cellCount) end -= 1;\r\n\r\n        //console.log(start, end);\r\n        let generatedCount = 0;\r\n        while (generatedCount < selectedCount.current) {\r\n            const index = getRandomInt(start, end - 1);\r\n            if (used.includes(index)) continue;\r\n            //console.log(index);\r\n            used.push(index);\r\n            array[index] = {value: getRandomInt(1, 100), state: \"selected\"};\r\n            ++generatedCount;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    function restart() {\r\n        guessedCount.current = 0;\r\n        usedButtons.current = [];\r\n        setButtons(generateLevel());\r\n        timerRestart();\r\n    }\r\n\r\n    const onGridInit = useCallback((layout: HTMLDivElement) => {\r\n        if (layout == null) return;\r\n        const columnCount = window.getComputedStyle(layout).gridTemplateColumns.split(\" \").length;\r\n        const rowsCount = window.getComputedStyle(layout).gridTemplateRows.split(\" \").length;\r\n        setCellCount(columnCount * rowsCount);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!cellCount) return;\r\n\r\n        onFailMessageHide(() => {\r\n            guessedCount.current = 0;\r\n            usedButtons.current = [];\r\n            setButtons(generateLevel());\r\n            timerStart();\r\n        })\r\n\r\n        onPassMessageHide(() => {\r\n            guessedCount.current = 0;\r\n            usedButtons.current = [];\r\n            setButtons(generateLevel());\r\n            timerStart();\r\n        })\r\n\r\n        onExpire(() => {\r\n            setButtons([]);\r\n            setIsGameEnd(true);\r\n        })\r\n\r\n        setButtons(generateLevel());\r\n        timerStart();\r\n    }, [cellCount]);\r\n\r\n    useEffect(() => {\r\n        if (!cellCount) return;\r\n        if (pauseMenuIsVisible) timerPause();\r\n        else timerStart();\r\n    }, [pauseMenuIsVisible]);\r\n\r\n    useEffect(() => {\r\n        scoreRef.current = score;\r\n    }, [score]);\r\n\r\n    function saveRecord() {\r\n        if (scoreRef.current > memorySweep) {\r\n            dispatch(setMemorySweepScore(scoreRef.current));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledWrapper>\r\n            {failMessagePlaceholder}\r\n            {passMessagePlaceholder}\r\n            {pauseMenuPlaceholder}\r\n            <GameEndMenu onLeave={saveRecord} isVisible={isGameEnd} setIsVisible={setIsGameEnd} onRestart={restart} score={score} bestScore={memorySweep}/>\r\n            <PauseButton onClick={showPauseMenu} aria-disabled={pauseMenuIsVisible}/>\r\n            <Score count={score}/>\r\n            <Timer>{formatTime(minutes, seconds)}</Timer>\r\n            <StyledGrid ref={onGridInit}>\r\n                {buttons.map((item, index) => {\r\n                    switch (item.state) {\r\n                        case \"selected\":\r\n                            return (\r\n                                <RectButton\r\n                                    key={keys[index]}\r\n                                    onClick={() => onButtonClick(index)}\r\n                                    selected={true}\r\n                                >\r\n                                    {item.value}\r\n                                </RectButton>\r\n                            );\r\n                        case \"visible\":\r\n                            return <RectButton key={keys[index]} onClick={() => onButtonClick(index)}/>\r\n                        default:\r\n                            return <div key={keys[index]}/>\r\n                    }\r\n                })}\r\n            </StyledGrid>\r\n        </StyledWrapper>\r\n    );\r\n};\r\n\r\nexport default MemorySweepPage;"],"names":["appearAnimation","keyframes","_templateObject","_taggedTemplateLiteral","showAnimation","_templateObject2","StyledButton","styled","button","_templateObject3","props","$color","$animation","_ref","children","onClick","selected","reshow","reset","animation","setAnimation","useState","color","setColor","useEffect","undefined","timeout","setTimeout","clearTimeout","_jsx","StyledWrapper","PageWrapper","StyledGrid","div","MemorySweepPage","cellCount","setCellCount","keys","useUniqueKeys","name","buttons","setButtons","minutes","seconds","timerStart","timerPause","timerRestart","onExpire","useTimer","score","setScore","scoreRef","useRef","selectedCount","guessedCount","usedButtons","pauseMenuPlaceholder","showPauseMenu","pauseMenuIsVisible","usePauseMenu","failMessagePlaceholder","showFailMessage","onFailMessageHide","useFailMessage","passMessagePlaceholder","showPassMessage","onPassMessageHide","usePassMessage","isGameEnd","setIsGameEnd","dispatch","useAppDispatch","memorySweep","useAppSelector","state","user","onButtonClick","index","current","includes","push","prev","length","generateLevel","getRandomInt","array","Array","fill","used","start","Math","floor","end","i","value","generatedCount","onGridInit","useCallback","layout","columnCount","window","getComputedStyle","gridTemplateColumns","split","rowsCount","gridTemplateRows","_jsxs","GameEndMenu","onLeave","setMemorySweepScore","isVisible","setIsVisible","onRestart","bestScore","PauseButton","Score","count","Timer","formatTime","ref","map","item","RectButton"],"sourceRoot":""}